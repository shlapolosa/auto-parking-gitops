# Based on PRD: requirements/analysis/prd/automated-parking-PRD.md
# Automated Parking System - Complete OAM Application Definitions
# Generated by Solution Architect Expert on 2025-09-10

---
# Infrastructure Layer - Core data and messaging services
apiVersion: core.oam.dev/v1beta1
kind: Application
metadata:
  name: parking-infrastructure
  namespace: parking-system
  annotations:
    app.oam.dev/description: "Core infrastructure for automated parking system"
    app.oam.dev/version: "1.0.0"
    app.oam.dev/tier: "infrastructure"
spec:
  components:
  # Primary Database for transactional data
  - name: postgres-primary
    type: neon-postgres
    properties:
      database: "parking_system"
      username: "parking_app"
      region: "us-east-1"
      computeSize: "2"
      autoscaling: true
      suspendTimeout: 300
      branch: "main"
      poolerEnabled: true
    
  # High-performance caching layer
  - name: redis-cache
    type: redis
    properties:
      authEnabled: true
      password: "parking-redis-2024"
      architecture: "replication"
      persistenceEnabled: true
      storageSize: "50Gi"
      replicaCount: 3
      metricsEnabled: true
      
  # Event streaming platform
  - name: kafka-events
    type: kafka
    properties:
      replicas: 3
      storageSize: "200Gi"
      
  # Analytics and reporting database  
  - name: clickhouse-analytics
    type: clickhouse
    properties:
      version: "23.5"
      replicas: 2
      database: "parking_analytics"
      storageSize: "500Gi"
      resources:
        cpu: "4"
        memory: "16Gi"
        
  # IoT and real-time data processing
  - name: iot-platform
    type: realtime-platform
    properties:
      mqttEnabled: true
      kafkaIntegration: true
      redisIntegration: true
      scalingPolicy: "adaptive"
      
  policies:
  - name: security-policy
    type: security-policy
    properties:
      allowedOrigins: ["parking-system", "monitoring"]
      
  - name: health-monitoring
    type: health
    properties:
      probeInterval: 30
      probeTimeout: 10

---
# Core Application Layer - Business logic microservices
apiVersion: core.oam.dev/v1beta1
kind: Application
metadata:
  name: parking-core-services
  namespace: parking-system
  annotations:
    app.oam.dev/description: "Core business services for parking management"
    app.oam.dev/version: "1.0.0"
    app.oam.dev/depends-on: "parking-infrastructure"
    app.oam.dev/tier: "application"
spec:
  components:
  # Parking availability and space management
  - name: availability-service
    type: webservice
    properties:
      image: "docker.io/parkingsystem/availability-service:v1.0.0"
      port: 8080
      version: "1.0.0"
      healthPath: "/health"
      resources:
        cpu: "1000m"
        memory: "2Gi"
      environment:
        NODE_ENV: "production"
        LOG_LEVEL: "info"
        POSTGRES_HOST: "postgres-primary"
        REDIS_HOST: "redis-cache"
        KAFKA_BROKERS: "kafka-events:9092"
      realtime: "iot-platform"
      enableGraphQLFederation: true
      apiVersion: "v1"
      repository: "parking-system-unified"
    traits:
    - type: autoscaler
      properties:
        minReplicas: 3
        maxReplicas: 20
        targetCPU: 70
        targetMemory: 80
    - type: ingress
      properties:
        domain: "api.parkingsystem.com"
        path: "/availability"
        enableTLS: true
    - type: kafka-producer
      properties:
        topics: ["availability.updated", "sensor.data.processed"]
        kafkaCluster: "kafka-events"
    - type: kafka-consumer
      properties:
        topics: ["sensor.occupancy.changed", "reservation.status.changed"]
        consumerGroup: "availability-service-group"
        kafkaCluster: "kafka-events"

  # User authentication and profile management
  - name: user-service
    type: webservice
    properties:
      image: "docker.io/parkingsystem/user-service:v1.0.0"
      port: 8080
      version: "1.0.0"
      healthPath: "/health"
      resources:
        cpu: "500m"
        memory: "1Gi"
      environment:
        SPRING_PROFILES_ACTIVE: "production"
        DATABASE_URL: "postgresql://postgres-primary:5432/parking_system"
        REDIS_URL: "redis://redis-cache:6379"
        AUTH0_DOMAIN: "parkingsystem.auth0.com"
      enableGraphQLFederation: true
      apiVersion: "v1"
      repository: "parking-system-unified"
    traits:
    - type: autoscaler
      properties:
        minReplicas: 2
        maxReplicas: 10
        targetCPU: 75
    - type: ingress
      properties:
        domain: "api.parkingsystem.com" 
        path: "/users"
        enableTLS: true
    - type: kafka-producer
      properties:
        topics: ["user.registered", "user.updated"]
        kafkaCluster: "kafka-events"

  # Parking space reservations
  - name: reservation-service
    type: webservice
    properties:
      image: "docker.io/parkingsystem/reservation-service:v1.0.0"
      port: 8080
      version: "1.0.0"
      healthPath: "/health"
      resources:
        cpu: "800m"
        memory: "1.5Gi"
      environment:
        JAVA_OPTS: "-Xmx1g -server"
        DATABASE_URL: "postgresql://postgres-primary:5432/parking_system"
        REDIS_URL: "redis://redis-cache:6379"
        KAFKA_BROKERS: "kafka-events:9092"
      enableGraphQLFederation: true
      apiVersion: "v1"
      repository: "parking-system-unified"
    traits:
    - type: autoscaler
      properties:
        minReplicas: 2
        maxReplicas: 15
        targetCPU: 70
        targetMemory: 75
    - type: ingress
      properties:
        domain: "api.parkingsystem.com"
        path: "/reservations"
        enableTLS: true
    - type: kafka-producer
      properties:
        topics: ["reservation.created", "reservation.cancelled", "reservation.completed"]
        kafkaCluster: "kafka-events"
    - type: kafka-consumer
      properties:
        topics: ["payment.completed", "availability.updated"]
        consumerGroup: "reservation-service-group"
        kafkaCluster: "kafka-events"

  # Payment processing and billing
  - name: payment-service
    type: webservice
    properties:
      image: "docker.io/parkingsystem/payment-service:v1.0.0"
      port: 8080
      version: "1.0.0"
      healthPath: "/health"
      resources:
        cpu: "600m"
        memory: "1Gi"
      environment:
        NODE_ENV: "production"
        DATABASE_URL: "postgresql://postgres-primary:5432/parking_system"
        STRIPE_SECRET_KEY: "${STRIPE_SECRET_KEY}"
        WEBHOOK_SECRET: "${STRIPE_WEBHOOK_SECRET}"
      envFrom:
      - secretRef:
          name: payment-secrets
      enableGraphQLFederation: true
      apiVersion: "v1"  
      repository: "parking-system-unified"
    traits:
    - type: autoscaler
      properties:
        minReplicas: 2
        maxReplicas: 8
        targetCPU: 80
    - type: ingress
      properties:
        domain: "api.parkingsystem.com"
        path: "/payments"
        enableTLS: true
    - type: kafka-producer
      properties:
        topics: ["payment.completed", "payment.failed", "payment.refunded"]
        kafkaCluster: "kafka-events"
    - type: kafka-consumer
      properties:
        topics: ["reservation.created", "reservation.cancelled"]
        consumerGroup: "payment-service-group"
        kafkaCluster: "kafka-events"

  # Analytics and business intelligence
  - name: analytics-service
    type: webservice
    properties:
      image: "docker.io/parkingsystem/analytics-service:v1.0.0"
      port: 8080
      version: "1.0.0"
      healthPath: "/health"
      resources:
        cpu: "2000m"
        memory: "4Gi"
      environment:
        PYTHON_ENV: "production"
        CLICKHOUSE_HOST: "clickhouse-analytics"
        CLICKHOUSE_PORT: "9000"
        KAFKA_BROKERS: "kafka-events:9092"
        REDIS_URL: "redis://redis-cache:6379"
      enableGraphQLFederation: true
      apiVersion: "v1"
      repository: "parking-system-unified"
    traits:
    - type: autoscaler
      properties:
        minReplicas: 1
        maxReplicas: 5
        targetCPU: 75
        targetMemory: 85
    - type: ingress
      properties:
        domain: "api.parkingsystem.com"
        path: "/analytics"
        enableTLS: true
    - type: kafka-consumer
      properties:
        topics: ["availability.updated", "reservation.completed", "payment.completed", "user.registered"]
        consumerGroup: "analytics-service-group"
        kafkaCluster: "kafka-events"

  # Notifications and messaging
  - name: notification-service
    type: webservice
    properties:
      image: "docker.io/parkingsystem/notification-service:v1.0.0"
      port: 8080
      version: "1.0.0"
      healthPath: "/health"
      resources:
        cpu: "400m"
        memory: "800Mi"
      environment:
        NODE_ENV: "production"
        DATABASE_URL: "postgresql://postgres-primary:5432/parking_system"
        REDIS_URL: "redis://redis-cache:6379"
        TWILIO_ACCOUNT_SID: "${TWILIO_ACCOUNT_SID}"
        SENDGRID_API_KEY: "${SENDGRID_API_KEY}"
      envFrom:
      - secretRef:
          name: notification-secrets
      enableGraphQLFederation: true
      apiVersion: "v1"
      repository: "parking-system-unified"
    traits:
    - type: autoscaler
      properties:
        minReplicas: 2
        maxReplicas: 8
        targetCPU: 70
    - type: ingress
      properties:
        domain: "api.parkingsystem.com"
        path: "/notifications"
        enableTLS: true
    - type: kafka-consumer
      properties:
        topics: ["reservation.reminder", "payment.failed", "availability.alert"]
        consumerGroup: "notification-service-group"
        kafkaCluster: "kafka-events"

  policies:
  - name: security-policy
    type: security-policy
    properties:
      allowedOrigins: ["parking-system", "istio-system"]
      
  - name: health-monitoring
    type: health
    properties:
      probeInterval: 15
      probeTimeout: 5

---
# Chat & AI Layer - Conversational AI and customer support
apiVersion: core.oam.dev/v1beta1
kind: Application
metadata:
  name: parking-chat-platform
  namespace: parking-system
  annotations:
    app.oam.dev/description: "AI-powered chat and customer support platform"
    app.oam.dev/version: "1.0.0"
    app.oam.dev/depends-on: "parking-core-services"
    app.oam.dev/tier: "ai"
spec:
  components:
  # AI-powered chatbot service
  - name: chat-service
    type: rasa-chatbot
    properties:
      modelPath: "/models/parking-assistant-v1"
      channels: ["websocket", "whatsapp", "telegram", "webchat"]
      fallbackEnabled: true
      confidenceThreshold: 0.8
      humanHandoffThreshold: 0.3
      resources:
        cpu: "1500m"
        memory: "3Gi"
      environment:
        RASA_ENV: "production"
        DATABASE_URL: "mongodb://mongodb-conversations:27017/parking_conversations"
        REDIS_URL: "redis://redis-cache:6379"
        AVAILABILITY_SERVICE_URL: "http://availability-service:8080"
        USER_SERVICE_URL: "http://user-service:8080"
        RESERVATION_SERVICE_URL: "http://reservation-service:8080"
      repository: "parking-system-unified"
    traits:
    - type: autoscaler
      properties:
        minReplicas: 2
        maxReplicas: 12
        targetCPU: 75
        targetMemory: 80
    - type: ingress
      properties:
        domain: "chat.parkingsystem.com"
        path: "/"
        enableTLS: true
    - type: kafka-consumer
      properties:
        topics: ["user.query.parking", "reservation.status.changed"]
        consumerGroup: "chat-service-group"
        kafkaCluster: "kafka-events"

  # Conversation storage
  - name: mongodb-conversations
    type: mongodb
    properties:
      authEnabled: true
      rootPassword: "parking-mongo-2024"
      database: "parking_conversations"
      username: "chat_user"
      password: "chat_pass_2024"
      architecture: "replicaset"
      replicaCount: 2
      persistenceEnabled: true
      storageSize: "100Gi"
      metricsEnabled: true

  policies:
  - name: security-policy
    type: security-policy
    properties:
      allowedOrigins: ["parking-system", "istio-system"]

---
# API Gateway Layer - GraphQL federation and API management
apiVersion: core.oam.dev/v1beta1  
kind: Application
metadata:
  name: parking-api-gateway
  namespace: parking-system
  annotations:
    app.oam.dev/description: "GraphQL API gateway for unified data access"
    app.oam.dev/version: "1.0.0"
    app.oam.dev/depends-on: "parking-core-services"
    app.oam.dev/tier: "gateway"
spec:
  components:
  # GraphQL federation gateway
  - name: graphql-gateway
    type: graphql-gateway
    properties:
      federatedServices:
      - name: "availability-service"
        url: "http://availability-service:8080/graphql"
        sdl: "/schemas/availability.graphql"
      - name: "user-service" 
        url: "http://user-service:8080/graphql"
        sdl: "/schemas/users.graphql"
      - name: "reservation-service"
        url: "http://reservation-service:8080/graphql"
        sdl: "/schemas/reservations.graphql"
      - name: "payment-service"
        url: "http://payment-service:8080/graphql"
        sdl: "/schemas/payments.graphql"
      - name: "analytics-service"
        url: "http://analytics-service:8080/graphql"
        sdl: "/schemas/analytics.graphql"
      - name: "notification-service"
        url: "http://notification-service:8080/graphql"
        sdl: "/schemas/notifications.graphql"
      authEnabled: true
      rateLimiting: true
      corsEnabled: true
      introspectionEnabled: false
      playgroundEnabled: false
      resources:
        cpu: "800m"
        memory: "1.5Gi"
      environment:
        NODE_ENV: "production"
        AUTH0_DOMAIN: "parkingsystem.auth0.com"
        AUTH0_AUDIENCE: "parking-system-api"
        REDIS_URL: "redis://redis-cache:6379"
      repository: "parking-system-unified"
    traits:
    - type: autoscaler
      properties:
        minReplicas: 3
        maxReplicas: 15
        targetCPU: 70
        targetMemory: 75
    - type: ingress
      properties:
        domain: "api.parkingsystem.com"
        path: "/graphql"
        enableTLS: true

  # Identity and authentication service
  - name: identity-service
    type: identity-service
    properties:
      provider: "auth0"
      domain: "parkingsystem.auth0.com"
      clientId: "${AUTH0_CLIENT_ID}"
      clientSecret: "${AUTH0_CLIENT_SECRET}"
      audience: "parking-system-api"
      algorithms: ["RS256"]
      cache: true
      cacheTTL: 3600
      resources:
        cpu: "300m"
        memory: "512Mi"
      envFrom:
      - secretRef:
          name: auth0-secrets
      repository: "parking-system-unified"
    traits:
    - type: autoscaler
      properties:
        minReplicas: 2
        maxReplicas: 8
        targetCPU: 75

  policies:
  - name: security-policy
    type: security-policy
    properties:
      allowedOrigins: ["parking-system", "istio-system"]